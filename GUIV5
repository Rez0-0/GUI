import tkinter as tk
from tkinter import ttk, messagebox
import threading
import time
import random

# --- Global Variables ---
global_compounds = []  # Truly global list of compounds

class BatteryExperimentApp:
    def __init__(self, root):
        """Initialize the main application window and layout."""
        self.root = root
        self.root.title("Battery Additives Experiment UI")
        self.root.geometry("800x600")
        self.root.resizable(True, True)
        
        # Fade in the window from 0% to 100% opacity
        self.root.attributes("-alpha", 0.0)
        self.root.after(50, lambda: self.fade_in_step(0.0))
        
        # Handle window close
        self.root.protocol("WM_DELETE_WINDOW", self.on_closing)
        
        # Outer frame that fills the entire window
        self.main_frame = tk.Frame(self.root, bg="#2C3E50")
        self.main_frame.pack(fill="both", expand=True)

        # Create notebook (tabs)
        self.notebook = ttk.Notebook(self.main_frame)
        self.notebook.pack(fill="both", expand=True)

        # Manual Tab
        self.manual_frame = tk.Frame(self.notebook, bg="#2C3E50")
        self.notebook.add(self.manual_frame, text="Manual")
        
        # Automatic Tab
        self.automatic_frame = tk.Frame(self.notebook, bg="#2C3E50")
        self.notebook.add(self.automatic_frame, text="Automatic")

        # Populate the manual tab with the existing UI
        self.create_manual_ui()
        self.create_automatic_ui()

    def create_manual_ui(self):
        self.selected_compounds = []  # List to store selected compounds
        """Creates the UI for the manual experiment mode."""
        self.conductivity_value = tk.StringVar(value="0.00")
        self.experiment_count = 0
        self.compounds = global_compounds
        self.experiments_log = []
        """Creates the UI for the manual experiment mode."""
        container = tk.Frame(self.manual_frame, bg="#2C3E50")
        container.pack(fill="x", anchor="n", pady=10)
        
        # Title Label
        self.title_label = tk.Label(
            container,
            text="Battery Additives Experiment UI",
            font=("Helvetica", 18, "bold"),
            bg="#2C3E50",
            fg="#ECF0F1"
        )
        self.title_label.pack(anchor="n", pady=10)
        
        # Form container positioned under title
        form_container = tk.Frame(self.manual_frame, bg="#2C3E50")
        form_container.pack(fill="x", anchor="n", padx=20, pady=10)
        form_container.columnconfigure(0, weight=1)
        form_container.columnconfigure(1, weight=1)
        
        # Class variables
        self.conductivity_value = tk.StringVar(value="0.00")
        self.experiment_count = 0
        self.iterations = 10
        self.compounds = global_compounds
        self.experiments_log = []
        
        self.default_compounds = ["Compound 1", "Compound 2", "Compound 3"]
        self.selected_default_compound = tk.StringVar(value=self.default_compounds[0])

        for idx, (label_text, variable) in enumerate([
            ("Number of Iterations:", None),
            ("Select Default Compound:", None),
            ("Concentration (%):", None)
        ]):
            label = tk.Label(
                form_container, text=label_text, font=("Helvetica", 14), bg="#2C3E50", fg="#ECF0F1"
            )
            label.grid(row=idx, column=0, padx=10, pady=5, sticky="e")
            
            if idx == 0:
                self.iterations_entry = tk.Entry(
                    form_container, font=("Helvetica", 14), width=15, bg="#3B4B5C", fg="#ECF0F1", insertbackground="#ECF0F1"
                )
                self.iterations_entry.insert(0, str(self.iterations))
                self.iterations_entry.grid(row=idx, column=1, padx=10, pady=5, sticky="w")
            elif idx == 1:
                self.default_compound_menu = ttk.Combobox(
                    form_container, textvariable=self.selected_default_compound, values=self.default_compounds, font=("Helvetica", 14), state="readonly", width=17
                )
                self.default_compound_menu.grid(row=idx, column=1, padx=10, pady=5, sticky="w")
            else:
                self.concentration_entry = tk.Entry(
                    form_container, font=("Helvetica", 14), width=15, bg="#3B4B5C", fg="#ECF0F1", insertbackground="#ECF0F1"
                )
                self.concentration_entry.grid(row=idx, column=1, padx=10, pady=5, sticky="w")
        
        # Add Compound Button
        self.add_compound_button = tk.Button(
            form_container, text="Add Selected Compound", font=("Helvetica", 12), bg="#3498DB", fg="#FFFFFF", command=self.add_selected_compound
        )
        self.add_compound_button.grid(row=3, column=0, columnspan=2, padx= 280, pady=5, sticky="w")
        
        # Run Button
        self.run_button = tk.Button(
            form_container, text="Run Experiment", command=self.run_experiment, font=("Helvetica", 12, "bold"), bg="#2ECC71", fg="#FFFFFF", height=1
        )
        self.run_button.grid(row=9, column=0, columnspan=2, padx= 310, pady=5, sticky="w")
        
        # Compounds List Label
        self.compounds_list_label = tk.Label(
            form_container, text="Compounds List:", font=("Helvetica", 12, "bold"), bg="#2C3E50", fg="#ECF0F1"
        )
        self.compounds_list_label.grid(row=4, column=0, columnspan=2, pady=5)
        
        # Compounds Listbox
        self.compounds_listbox = tk.Listbox(
            form_container, font=("Helvetica", 12), width=40, height=5, bg="#3B4B5C", fg="#ECF0F1"
        )
        self.compounds_listbox.grid(row=5, column=0, columnspan=2, pady=5)
        
        # Conductivity Monitor
        self.conductivity_label = tk.Label(
            form_container, text="Conductivity: (Placeholder)", font=("Helvetica", 14), bg="#2C3E50", fg="#ECF0F1"
        )
        self.conductivity_label.grid(row=6, column=0, columnspan=2, pady=5)
        
        self.conductivity_value_label = tk.Label(
            form_container, textvariable=self.conductivity_value, font=("Helvetica", 14), bg="#2C3E50", fg="#E74C3C"
        )
        self.conductivity_value_label.grid(row=7, column=0, columnspan=2, pady=5)
        
        # Function to add selected compound with concentration
    def add_selected_compound(self):
        compound = self.selected_default_compound.get()
        concentration = self.concentration_entry.get()
        if not concentration:
            messagebox.showerror("Invalid Input", "Please enter a concentration for the compound.")
            return
        try:
            concentration = float(concentration)
            if concentration < 0:
                raise ValueError
        except ValueError:
            messagebox.showerror("Invalid Input", "Concentration must be a valid non-negative number.")
            return
        compound_entry = f"{compound}: {concentration:.2f}%"
        self.selected_compounds.append(compound_entry)
        self.compounds_listbox.insert(tk.END, compound_entry)
        self.concentration_entry.delete(0, tk.END)
        messagebox.showinfo("Success", f"Added {compound} with {concentration:.2f}% concentration.")

    # Control Buttons
        self.run_button = tk.Button(
            form_container, text="Run", command=self.run_experiment, font=("Helvetica", 10, "bold"), bg="#2ECC71", fg="#FFFFFF", width=10, height=1
        )
        self.run_button.grid(row=8, column=0, columnspan=2, pady=20, sticky="ew")
        
    def create_automatic_ui(self):
        """Creates the UI for the automatic experiment mode."""
        container = tk.Frame(self.automatic_frame, bg="#2C3E50")
        container.pack(fill="x", anchor="n", pady=10)
        
        # Title label
        label = tk.Label(container, text="Automatic Experiment Mode", font=("Helvetica", 18, "bold"), bg="#2C3E50", fg="#ECF0F1")
        label.pack(anchor="n", pady=10)
        
        form_container = tk.Frame(self.automatic_frame, bg="#2C3E50")
        form_container.pack(fill="x", anchor="n", padx=20, pady=10)
        
        # Placeholder for automatic controls
        placeholder = tk.Label(form_container, text="[Automatic Controls Here]", font=("Helvetica", 14), bg="#2C3E50", fg="#ECF0F1")
        placeholder.pack(anchor="n", pady=10)

    def run_experiment(self):
        """Runs the manual experiment with user-defined parameters."""
        self.experiment_count += 1
        try:
            self.iterations = int(self.iterations_entry.get())
            if self.iterations < 1:
                raise ValueError
        except ValueError:
            messagebox.showerror("Invalid Input", "Please ensure iterations is a valid positive integer.")
            return

        print(f"Running Experiment #{self.experiment_count} with {self.iterations} iterations.")
        
        for i in range(self.iterations):
            conductivity = random.uniform(0, 100)
            self.conductivity_value.set(f"{conductivity:.2f}")
            self.root.update()
            time.sleep(0.5)
        
    def print_parameters(self):
        """Prints the current experiment parameters."""
        print("Current Experiment Parameters:")
        print(f"Iterations: {self.iterations}")
        print("Compounds:")
        for c in self.compounds:
            print(f"  - {c['name']}: {c['concentration']:.2f}%")

    # --- Fade-In Animation for the Entire Window ---
    def fade_in_step(self, alpha):
        if alpha < 1.0:
            alpha += 0.05
            self.root.attributes("-alpha", alpha)
            self.root.after(50, lambda: self.fade_in_step(alpha))
        else:
            self.root.attributes("-alpha", 1.0)

    def on_closing(self):
        self.root.destroy()

# --- Main App Entry Point ---
if __name__ == "__main__":
    root = tk.Tk()
    app = BatteryExperimentApp(root)
    root.mainloop()
